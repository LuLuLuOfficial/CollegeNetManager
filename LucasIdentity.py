# Autho_Lucas: list[str] = [ '|-|                *     * ******* *     * ******* *               *       *     * *******    *    *******                |-|\n',
#                            '|-|                * *   * *       *     *    *    *               *       *     * *         * *   *                      |-|\n',
#                            '|-|                *  *  * ******* *******    *    *               *       *     * *        *****  *******                |-|\n',
#                            '|-|                *   * * *       *     *    *    *               *       *     * *       *     *       *                |-|\n',
#                            '|-|                *     * ******* *     * ******* *******         ******* ******* ******* *     * *******                |-|\n',
#                            '-----------------------------------------------------------------------------------------------------------------------------\n',
#                            '|-| *               *               *                      *******   ****    ****                                   *     |-|\n',
#                            '|-| *               *               *                      *     *   *       *       *               *              *     |-|\n',
#                            '|-| *       *   *   *       *   *   *       *   *          *     *  *****   *****           *****           *****   *     |-|\n',
#                            '|-| *       *   *   *       *   *   *       *   *          *     *   *       *       *      *        *      *   *   *     |-|\n',
#                            '|-| ******* ******  ******* ******  ******* ******         *******   *       *       *      *****    *      ******  ***   |-|\n']

AtoZ: dict = {
    'Example': [    # 11 x 6
        '',
        '',
        '',
        '',
        '',
        '',
    ],
    ' ': [
        '           ',
        '           ',
        '           ',
        '           ',
        '           ',
        '           ',
    ],
    'A': [
        '     _     ',
        '    / \\    ',
        '   / _ \\   ',
        '  / /_\\ \\  ',
        ' / /___\\ \\ ',
        '/_/     \\_\\',
    ],
    'B': [
        ' _____     ',
        '|  __ \\    ',
        '| |__| |_  ',
        '|  ____  \\ ',
        '| |____| | ',
        '|________/ ',
    ],
    'C': [
        ' _________ ',
        '|  _______|',
        '| |        ',
        '| |        ',
        '| |_______ ',
        '|_________|',
    ],
    'D': [
        ' ________  ',
        '|  _____ \\ ',
        '| |     \\ |',
        '| |     | |',
        '| |_____/ |',
        '|________/ ',
    ],
    'E': [
        ' _________ ',
        '|  _______|',
        '| |_______ ',
        '|  _______|',
        '| |_______ ',
        '|_________|',
    ],
    'F': [
        ' _________ ',
        '|  _______|',
        '| |_______ ',
        '|  _______|',
        '| |        ',
        '|_|        ',
    ],
    'G': [
        ' _________ ',
        '|  _______|',
        '| |   ____ ',
        '| |  |__  |',
        '| |_____| |',
        '|_________|',
    ],
    'H': [
        ' _       _ ',
        '| |     | |',
        '| |_____| |',
        '|  _____  |',
        '| |     | |',
        '|_|     |_|',
    ],
    'I': [
        ' _________ ',
        '|___   ___|',
        '    | |    ',
        '    | |    ',
        ' ___| |___ ',
        '|_________|',
    ],
    'J': [
        '   _______ ',
        '  |__   __|',
        '     | |   ',
        '  _  | |   ',
        ' | |_| |   ',
        ' |_____|   ',
    ],
    'K': [
        ' _  _      ',
        '| |/ /     ',
        '|   |      ',
        '| |\\ \\     ',
        '| | \\ \\___ ',
        '|_|  \\____|',
    ],
    'L': [
        ' _         ',
        '| |        ',
        '| |        ',
        '| |        ',
        '| |_______ ',
        '|_________|',
    ],
    'M': [
        '  _______  ',
        ' / _   _ \\ ',
        '/ / | | \\ \\',
        '| | | | | |',
        '| | | | | |',
        '|_| |_| |_|',
    ],
    'N': [
        ' ___     _ ',
        '|   \\   | |',
        '| |\\ \\  | |',
        '| | \\ \\ | |',
        '| |  \\ \\| |',
        '|_|   \\___|',
    ],
    'O': [
        ' _________ ',
        '|  _____  |',
        '| |     | |',
        '| |     | |',
        '| |_____| |',
        '|_________|',
    ],
    'P': [
        ' _________ ',
        '|  _____  |',
        '| |_____| |',
        '|  _______|',
        '| |        ',
        '|_|        ',
    ],
    'Q': [
        ' _________ ',
        '|  _____  |',
        '| |     | |',
        '| |   /\\| |',
        '| |___\\   |',
        '|______/\\_|',
    ],
    'R': [
        ' ________  ',
        '|  ____  \\ ',
        '| |____|  |',
        '|  ____  / ',
        '| |    \\ \\ ',
        '|_|     \\_\\',
    ],
    'S': [
        ' _________ ',
        '|  _______|',
        '| |_______ ',
        '|_______  |',
        ' _______| |',
        '|_________|',
    ],
    'T': [
        ' _________ ',
        '|___   ___|',
        '    | |    ',
        '    | |    ',
        '    | |    ',
        '    |_|    ',
    ],
    'U': [
        ' _       _ ',
        '| |     | |',
        '| |     | |',
        '| |     | |',
        '| |_____| |',
        '|______/\\_|',
    ],
    'V': [
        ' _       _ ',
        '| |     | |',
        ' \\ \\   / / ',
        '  \\ \\_/ /  ',
        '   \\   /   ',
        '    \\_/    ',
    ],
    'W': [
        ' _   _   _ ',
        '| | | | | |',
        '| | | | | |',
        '| | | | | |',
        '\\ \\_| |_/ /',
        ' \\_______/ ',
    ],
    'X': [
        ' _       _ ',
        '\\ \\     / /',
        '  \\ \\_/ /  ',
        '   | _ |   ',
        '  / / \\ \\  ',
        '/_/     \\_\\',
    ],
    'Y': [
        '  _     _  ',
        ' \\ \\   / / ',
        '  \\ \\_/ /  ',
        '   \\   /   ',
        '    | |    ',
        '    |_|    ',
    ],
    'Z': [
        ' _________ ',
        '|______  _|',
        '     _/_/  ',
        '   _/_/    ',
        ' _/ /_____ ',
        '|_________|',
    ]
}

def Author_Lucas(Names: list[str] = ['NEHIL LUCAS', 'LULULU OFFICIAL']):
    Names: list[str] = Names
    Length: int = 0
    FormatedLetters: list[str] = []
    FormatedLetter: str = ''
    for n in range(len(Names)): # 字符串长度极值|字母转大写
        if len(Names[n]) > Length: Length = len(Names[n])
        Names[n] = Names[n].upper()
    for n in range(len(Names)): # 统一字符串长度为字符串长度极值
        if len(Names[n]) < Length:
            LengthPoor = Length - len(Names[n])
            Names[n] = ((' ')*(LengthPoor//2)) + (Names[n]) + ((' ')*(LengthPoor-LengthPoor//2))
    for n in range(len(Names)):
        ThisLine: str = Names[n]    # 当前正在处理的某行字母字符串
        for LineInFormat in range(len(AtoZ['Example'])):  # 当前正在处理的某行字母字符串 格式化中的行号
            FormatedLetters.append('|-| ')  # 当前正在处理的某行字母字符串 格式化中的新行
            for Letter in ThisLine:
                FormatedLetters[-1] += (f' {AtoZ[Letter][LineInFormat]} ')
            FormatedLetters[-1] += (' |-|')
        if (n != len(Names)-1): FormatedLetters.append(('-')*len(FormatedLetters[0]))
    return FormatedLetters

if __name__ == "__main__":
    Test_Autho_Lucas: list[str] = Author_Lucas()
    for n in Test_Autho_Lucas:
        print(n)